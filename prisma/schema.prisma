// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  email     String      @unique
  username  String      @unique
  googleId  String?     @unique
  password  String
  posts     Posts[]     @relation(name: "WrittenPosts")
  comments  Comments[]  @relation(name: "WrittenComments")
  likes     Posts[]     @relation(name: "LikedPosts")
  favorite  Posts[]     @relation(name: "FavoritePosts")
  roles     Role[]      @default([USER])
}

model Posts {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  author          User        @relation(name: "WrittenPosts", fields: [authorId], references: [id])
  authorId        Int
  content         String
  desc            String      @default("")
  commentCounter  Int         @default(0)
  comments        Comments[]  @relation(name: "PostsComments")
  likeCounter     Int         @default(0)
  likes           User[]      @relation(name: "LikedPosts")
  favorite        User[]      @relation(name: "FavoritePosts")
}

model RevokedToken {
  id        Int      @id @default(autoincrement())
  jti       String   @unique
  createdAt DateTime @default(now())
}

model Comments {
  id        Int      @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  author    User        @relation(name: "WrittenComments", fields: [authorId], references: [id])
  authorId   Int
  content   String
  post      Posts     @relation(name: "PostsComments", fields: [post_id], references: [id])
  post_id   Int
}

enum Role {
  USER
}